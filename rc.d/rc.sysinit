#!/bin/sh
#
# /etc/rc.d/rc.sysinit - run once at boot time
#
# Taken in part from Miquel van Smoorenburg's bcheckrc.
#

# Rerun ourselves through initlog
if [ -z "$IN_INITLOG" ]; then
 [ -f /sbin/initlog ] && exec /sbin/initlog -r /etc/rc.d/rc.sysinit
fi

# Set the path
PATH=/bin:/sbin:/usr/bin:/usr/sbin
export PATH

# Read in config data.
if [ -f /etc/sysconfig/network ]; then
    . /etc/sysconfig/network
else
    NETWORKING=no
    HOSTNAME=localhost
fi

# Source functions
. /etc/rc.d/init.d/functions

# Start up swapping.
action -n "Activating swap partitions" swapon -a

# Set the hostname.
action -n "Setting hostname ${HOSTNAME}" hostname ${HOSTNAME}

# Set the NIS domain name
if [ -n "$NISDOMAIN" ]; then
    action -n "Setting NIS domain name $NISDOMAIN" domainname $NISDOMAIN
else
    domainname ""
fi

if [ -f /fsckoptions ]; then
	fsckoptions=`cat /fsckoptions`
    else
	fsckoptions=''
fi

if [ -f /forcefsck ]; then
	fsckoptions='-f $fsckoptions'
fi

if [ ! -f /fastboot ]; then
	action -n "Checking root filesystem" fsck -T -a $fsckoptions /
	rc=$?
	
        # A return of 2 or higher means there were serious problems.
	if [ $rc -gt 1 ]; then
		echo
		echo
		echo "*** An error occurred during the file system check."
		echo "*** Dropping you to a shell; the system will reboot"
		echo "*** when you leave the shell."

		PS1="(Repair filesystem) \#"; export PS1
		sulogin

		echo "Unmounting file systems"
		umount -a
		mount -n -o remount,ro /
		echo "Automatic reboot in progress."
		reboot
	elif [ "$rc" = "1" -a -x /sbin/quotacheck ]; then
		action -n "Checking root filesystem quotas"  /sbin/quotacheck -v /
	fi
fi

if [ -x /sbin/quotaon ]; then
    action -n "Turning on user and group quotas for root filesystem"  /sbin/quotaon /
fi

# check for arguments 

mount -t proc /proc /proc

if grep -i nopnp /proc/cmdline >/dev/null ; then
    PNP=
else
    PNP=yes
fi

# set up pnp 
if [ -x /sbin/isapnp -a -f /etc/isapnp.conf ]; then
    if [ -n "$PNP" ]; then
	action -n "Setting up ISA PNP devices" /sbin/isapnp /etc/isapnp.conf
    else
	action -n "Skipping ISA PNP configuration at users request" /bin/true
    fi
fi

# Remount the root filesystem read-write.
action -n "Remounting root filesystem in read-write mode" mount -n -o remount,rw /

if [ -n "$IN_INITLOG" ]; then
    IN_INITLOG=
fi


if [ ! -f /etc/HOSTNAME ]; then
    echo ${HOSTNAME} > /etc/HOSTNAME
fi

# Clear mtab
>/etc/mtab

# Enter root and /proc into mtab.
mount -f /
mount -f /proc

if [ -f /proc/ksyms ]; then
    USEMODULES=y
else
    USEMODULES=
fi

# Set up kernel version-dependent symlinks.
rm -f /lib/modules/preferred

if [ -n "$USEMODULES" ]; then
    ktag="`cat /proc/version`"
    mtag=`grep -l "$ktag" /lib/modules/*/.rhkmvtag` 2> /dev/null
    if [ -n "$mtag" ]; then
	mver=`echo $mtag | sed -e 's,/lib/modules/,,' -e 's,/.rhkmvtag,,' -e 's,[ 	].*$,,'`
	ln -sf /lib/modules/$mver /lib/modules/preferred
	ln -sf /boot/System.map-$mver /boot/System.map
	ln -sf /boot/module-info-$mver /boot/module-info
    fi
fi

if [ -x /sbin/depmod -a -n "$USEMODULES" ]; then
    # Get ready for kerneld if module support in the kernel
    if [ -e /lib/modules/preferred ]; then
	    action -n "Finding module dependencies" depmod -a preferred
    else
	    action -n "Finding module dependencies" depmod -a
    fi
fi

# load sound modules
if ! grep -i nomodules /proc/cmdline >/dev/null ; then
    if [ -n "$USEMODULES" ]; then
	if grep -s "alias sound" /etc/conf.modules > /dev/null ; then
	    action -n "Loading sound module" modprobe sound
	    if grep -s "alias midi" /etc/conf.modules > /dev/null ; then
		action -n "Loading midi module" modprobe midi
	    fi
	fi
    fi
fi

if [ -x /sbin/kerneld -a -n "$USEMODULES" ]; then
    if [ -f /proc/sys/kernel/modprobe ]; then
	# /proc/sys/kernel/modprobe indicates built-in kmod instead
	echo "/sbin/modprobe" > /proc/sys/kernel/modprobe
    else
	/sbin/kerneld
	KERNELD=yes
    fi
fi

# Add raid devices
if [ -f /proc/mdstat -a -f /etc/raidtab -a -x /sbin/raidadd ]; then
	action -n "Starting up RAID devices" raidadd -a

	rc=$?

	if [ $rc = 0 ]; then
		raidrun -a
		rc=$?
	fi

	# A non-zero return means there were problems.
	if [ $rc -gt 0 ]; then
		echo
		echo
		echo "*** An error occurred during the RAID startup"
		echo "*** Dropping you to a shell; the system will reboot"
		echo "*** when you leave the shell."

		PS1="(RAID Repair) \#"; export PS1
		sulogin

		echo "Unmounting file systems"
		umount -a
		mount -n -o remount,ro /
		echo "Automatic reboot in progress."
		reboot
	fi
fi

# Check filesystems
if [ ! -f /fastboot ]; then
	action -n "Checking filesystems" fsck -T -R -A -a $fsckoptions

	rc=$?

	# A return of 2 or higher means there were serious problems.
	if [ $rc -gt 1 ]; then
		echo
		echo
		echo "*** An error occurred during the file system check."
		echo "*** Dropping you to a shell; the system will reboot"
		echo "*** when you leave the shell."

		PS1="(Repair filesystem) \#"; export PS1
		sulogin

		echo "Unmounting file systems"
		umount -a
		mount -n -o remount,ro /
		echo "Automatic reboot in progress."
		reboot
	elif [ "$rc" = "1" -a -x /sbin/quotacheck ]; then
		action -n "Checking filesystem quotas" /sbin/quotacheck -v -R -a
	fi
fi

# Mount all other filesystems (except for NFS and /proc, which is already
# mounted). Contrary to standard usage,
# filesystems are NOT unmounted in single user mode.
action -n "Mounting local filesystems" mount -a -t nonfs,proc

# set the console font
if [ -x /sbin/setsysfont ]; then
    /sbin/setsysfont
fi

if [ -x /sbin/quotaon ]; then
    action -n "Turning on user and group quotas for local filesystems" /sbin/quotaon -a
fi

# Clean out /etc.
rm -f /etc/mtab~ /fastboot /fsckoptions /forcefsck
>/var/run/utmp

# Delete UUCP lock files.
rm -f /var/lock/LCK*

# Delete stale subsystem files.
rm -f /var/lock/subsys/*

if [ -n "$KERNELD" ]; then
    touch /var/lock/subsys/kerneld
fi

# Delete stale pid files
rm -f /var/run/*.pid

# Delete X locks
rm -f /tmp/.X*-lock

# Delete Postgres sockets
rm -f /tmp/.s.PGSQL.*

# Set the system clock.
ARC=0
UTC=0
if [ -f /etc/sysconfig/clock ]; then
    . /etc/sysconfig/clock

    # convert old style clock config to new values
    if [ "${CLOCKMODE}" = "GMT" ]; then
	    UTC=true
    elif [ "${CLOCKMODE}" = "ARC" ]; then
	    ARC=true
    fi
fi

CLOCKDEF=""
if [ -x /sbin/hwclock ]; then
    CLOCKFLAGS="--hctosys"
    CLOCK=/sbin/hwclock
    $CLOCK --adjust
else
    CLOCKFLAGS="-a"
    CLOCK=/sbin/clock
fi

case "$UTC" in
  yes|true)
    CLOCKFLAGS="$CLOCKFLAGS -u";
    CLOCKDEF="$CLOCKDEF (utc)";
  ;;
esac

case "$ARC" in
  yes|true)
    CLOCKFLAGS="$CLOCKFLAGS -A";
    CLOCKDEF="$CLOCKDEF (arc)";
  ;;
esac

$CLOCK $CLOCKFLAGS
action -n "Setting clock $CLOCKDEF: `date`" date

# Right, now turn on swap in case we swap to files.
action -n "Enabling swap space" swapon -a 2>&1 | grep -v "busy"

# Initialize the serial ports.
if [ -f /etc/rc.d/rc.serial ]; then
	. /etc/rc.d/rc.serial
fi

# Load modules (for backward compatibility with VARs)
if [ -f /etc/rc.d/rc.modules ]; then
	/etc/rc.d/rc.modules
fi

# If a SCSI tape has been detected, load the st module unconditionally
# since many SCSI tapes don't deal well with st being loaded and unloaded
if [ -f /proc/scsi/scsi ] && cat /proc/scsi/scsi | grep -q 'Type:   Sequential-Access' 2>/dev/null ; then
	if cat /proc/devices | grep -qv ' 9 st' ; then
		if [ -n "$USEMODULES" ] ; then
			# Try to load the module.  If it fails, ignore it...
			modprobe st 2>/dev/null
		fi
	fi
fi

# Now that we have all of our basic modules loaded and the kernel going,
# let's dump the syslog ring somewhere so we can find it later
dmesg > /var/log/dmesg

# Feed entropy into the entropy pool
/etc/rc.d/init.d/random start
